MIT License

Copyright (c) 2018 Programming Society

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


/**
 * Module dependencies and files from other folders
 */
const chalk = require("chalk");
const para = require("../../paragraphs/para");
import { prompt } from "inquirer";
import logUpdate = require("log-update");
import { output } from "../functions";
import { randomNum } from "../functions/random";
import { offline } from "../questions";

const stdin: any = process.stdin;
const stdout: any = process.stdout;
let randomNumber: number = randomNum;
let quote: string;
quote = para[randomNumber].para;
if (quote.length < 100) {
  quote = para[randomNumber].para + " " + para[randomNumber - 1].para;
}

let stringTyped: string = "";
let gameEnd: boolean = true;
let timeStarted: number = 0;
let time: number = 0;
let wordsPermin: number = 0;

/**
 * @function keypress
 * @param {Object} chunk
 * @param {String} key
 */

function keypress(chunk, key) {
  if (key.ctrl && key.name === "c") {
    this.stdout.write("\n");
    process.exit();
  }
  if (key && key.name === "backspace") {
    if (stringTyped.length === 0) { return; }
    stringTyped = stringTyped.slice(0, -1);
  } else if (stringTyped.length < quote.length) {
    stringTyped += chunk;
  }
  updateColor();
}

function updateColor() {
  // Clearing the terminal for double time error

  stdout.write("\u001B[2J\u001B[0;0f");

  let updatedString = color(quote, stringTyped);
  updatedString += quote.slice(stringTyped.length, quote.length);
  const timeColour = "cyan";
  let wordsPerminColor = "cyan";
  if (wordsPermin < 30) {
    wordsPerminColor = "red";
  }
  logUpdate(
    `${updatedString}
    wordsPermin: ${chalk[wordsPerminColor](Math.round(wordsPermin * 10) / 10)}
    time: ${chalk[timeColour](Math.round(time * 10) / 10)}s`);
}

function color(quote, stringTyped) {
  let colouredString = "";
  let wrongInput = false;

  const quoteLetters = quote.split("");
  const typedLetters = stringTyped.split("");
  for (let i = 0; i < typedLetters.length; i++) {
    // if a single mistake,
    // the rest of the coloured string will appear red
    if (wrongInput) {
      colouredString += chalk.bgRed(quoteLetters[i]);
      continue;
    }

    if (typedLetters[i] === quoteLetters[i]) {
      wrongInput = false;
      colouredString += chalk.green(quoteLetters[i]);
      if (quote === stringTyped) {
        gameEnd = true;
      }
    } else {
      wrongInput = true;
      colouredString += chalk.bgRed(quoteLetters[i]);
    }
  }
  return colouredString;
}

function Time() {
  time = (Date.now() - timeStarted) / 1000;
}

function updateWpm() {
  if (stringTyped.length > 0) {
    wordsPermin = stringTyped.split(" ").length / (time / 60);
  }
}

function randomNumRetry() {
  randomNumber = Math.floor((Math.random() * para.length));
  quote = para[randomNumber].para;
  if (quote.length < 100) {
    quote = para[randomNumber].para + " " + para[randomNumber - 1].para;
  }
  return quote;
}

function gameEnded() {
  stdin.removeListener("keypress", keypress);
  prompt(offline.question1).then((answers) => {
    switch (answers.whatdo) {
      case "Retry":
        randomNumRetry();
        game();
        break;
      case "Exit":
        process.exit();
      default:
        process.exit();
    }
  });
}

function game() {
  stdout.write("\u001B[2J\u001B[0;0f");
  gameEnd = false;
  stringTyped = "";
  timeStarted = Date.now() + 5000;
  wordsPermin = 0;
  const startColor = "yellowBright";
  // Game Start
  const startinterval = setInterval(() => {
    const timeInterval = (Math.round((Date.now() - timeStarted) / 1000 * 10) / 10);
    logUpdate(`\nGame Starting in ${chalk[startColor](timeInterval)} sec`);
    if (timeInterval === 0) {
      clearInterval(startinterval);
      // displaying the quote
      stdout.write("\u001B[2J\u001B[0;0f");
      stdout.write(quote);
      // Moving cursor to start
      stdout.cursorTo(0);

      stdin.on("keypress", keypress);
      stdin.setRawMode(true);
      stdin.resume();
    }
  }, 1000);

  // After game starts

  const interval = setInterval(() => {
    if (gameEnd) {
      gameEnded();
      clearInterval(interval);
    } else {
      Time();
      updateWpm();
    }
  }, 1000);
}

module.exports = game;

